{"version":3,"sources":["logo.svg","Budget.js","PurchaseLog.js","PurchaseDataTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Budget","props","state","storage","name","amount","total","handleChange","bind","handleBudgetSubmit","e","this","setState","target","id","value","preventDefault","budgetEntry","Number","tempStorage","slice","push","forEach","entry","className","align","map","budgetItem","onSubmit","type","onChange","onClick","event","handler","render","React","Component","PurchaseLog","price","date","moment","format","category","stateProp","stateObj","console","log","for","handleSelect","PurchaseDataTable","COLSPAN","expenses","purchase","App","income","budgetTotal","totalPurchases","moneyLeft","expensesArray","renderIncomeForm","renderBillForm","renderPurchaseLogForm","postPurchase","submitPurchase","submitBudget","getPurchasesTotal","getPurchasesArr","toggleIncomeForm","toggleBillForm","getBudget","calculateBudget","deleteBudgetButton","deleteLogs","deleteLogsButton","then","res","data","length","Axios","get","computeedBudget","bills","purchaseObj","catch","err","budgetObj","postBudget","delete","budget","axios","post","deleteBudget","window","location","reload","togglePurchaseLogForm","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.37b7b25e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Axios from 'axios';\n\nclass Budget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      storage: [],\n      name: '',\n      amount: '',\n      total: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBudgetSubmit = this.handleBudgetSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  // need to move to app\n  handleBudgetSubmit(e) {\n    e.preventDefault();\n    let budgetEntry = {\n      name: this.state.name,\n      amount: this.state.amount\n    };\n    let total = this.state.total + Number(this.state.amount);\n    this.setState({ total: total });\n    let tempStorage = this.state.storage.slice();\n    tempStorage.push(budgetEntry);\n    this.setState({ storage: tempStorage });\n    this.state.storage.forEach(entry => (total += entry.amount));\n  }\n\n  render() {\n    return (\n      <div className=\"box\">\n        <table className=\"table\" align=\"center\">\n          <tr>\n            <th className=\"th\" className=\"title\" colSpan=\"2\">\n              Monthly Bills\n            </th>\n          </tr>\n          <tr>\n            <th className=\"th\">Bill</th>\n            <th className=\"th\">Amount($)</th>\n          </tr>\n          {this.state.storage.map(budgetItem => {\n            return (\n              <tr>\n                <td> {budgetItem.name} </td>\n                <td> ${budgetItem.amount}</td>\n              </tr>\n            );\n          })}\n        </table>\n        <form className=\"form\" onSubmit={this.handleBudgetSubmit}>\n          <label className=\"label\">\n            Bill\n            <input\n              className=\"input\"\n              type=\"text\"\n              id=\"name\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <br></br>\n          <label className=\"label\">\n            Amount\n            <input\n              className=\"input\"\n              type=\"number\"\n              id=\"amount\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input className=\"button is-primary\" type=\"submit\" value=\"Submit\" />\n        </form>\n        <div>\n          Note: Please add all bills one at a time before calculating budget\n        </div>\n        <button\n          className=\"button is-primary\"\n          onClick={event => {\n            this.props.handler(event, this.state);\n            this.props.render(event);\n          }}\n        >\n          Calculate Budget\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Budget;\n","import React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass PurchaseLog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      price: 0,\n      date: moment().format('MMM Do YY'),\n      category: 'restaurants/bars'\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  //handles change to input form\n  handleChange(e, stateProp) {\n    let value = e.target.value;\n    if (stateProp === 'price') {\n      value = Number(value);\n    }\n    let stateObj = {};\n    stateObj[stateProp] = value;\n    this.setState(stateObj);\n    console.log(this.state);\n  }\n  //handles change to drop down select element\n  handleSelect(event) {\n    this.setState({ category: event.target.value });\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"box\">\n        <div className=\"title\">Purchase Log</div>\n        <form>\n          <label className=\"label\">{'Name:  '}</label>\n          <input\n            className=\"input\"\n            onChange={event => this.handleChange(event, 'name')}\n          ></input>\n          <br />\n          <label className=\"label\">Cost: </label>\n          <input\n            className=\"input\"\n            type=\"number\"\n            onChange={event => this.handleChange(event, 'price')}\n          ></input>\n          <br />\n          <label className=\"label\" for=\"category\">\n            Category:{' '}\n          </label>\n          <div className=\"select is-primary\">\n            <select\n              className=\"select is-multiple\"\n              onChange={e => this.handleSelect(e)}\n              id=\"category\"\n              name=\"category\"\n            >\n              <option value=\"restaurants/bars\">Restaurants/Bars</option>\n              <option value=\"groceries\">Groceries</option>\n              <option value=\"transportation\">Transportation</option>\n              <option value=\"recreation\">Recreation</option>\n              <option value=\"other\">Other</option>\n            </select>\n          </div>\n          <br />\n          <button\n            className=\"button is-primary\"\n            onClick={event => this.props.handler(event, this.state)}\n          >\n            Submit Purchase\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default PurchaseLog;\n","import React from 'react';\n\nfunction PurchaseDataTable(props) {\n  return (\n    <div>\n      <table className=\"table\">\n        <tr>\n          <th COLSPAN=\"4\" className=\"tableHeader\">\n            Expense Log\n          </th>\n        </tr>\n        <tbody>\n          <tr>\n            <th>Category</th>\n            <th>Name</th>\n            <th>Price</th>\n            <th>Date</th>\n          </tr>\n\n          {props.expenses.map(purchase => {\n            return (\n              <tr>\n                <td>{purchase.category}</td>\n                <td>{purchase.name}</td>\n                <td>${purchase.price}</td>\n                <td>{purchase.date}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default PurchaseDataTable;\n","import React from 'react';\nimport logo from './logo.svg';\n// import './App.css';\n\nimport axios from 'axios';\nimport Budget from './Budget.js';\nimport PurchaseLog from './PurchaseLog.js';\nimport Axios from 'axios';\nimport PurchaseDataTable from './PurchaseDataTable';\nimport D3 from './d3';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      income: 0,\n      budgetTotal: 0,\n      totalPurchases: 0,\n      moneyLeft: 0,\n      expensesArray: [],\n      renderIncomeForm: true,\n      renderBillForm: false,\n      renderPurchaseLogForm: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.postPurchase = this.postPurchase.bind(this);\n    this.submitPurchase = this.submitPurchase.bind(this);\n    this.submitBudget = this.submitBudget.bind(this);\n    this.getPurchasesTotal = this.getPurchasesTotal.bind(this);\n    this.getPurchasesArr = this.getPurchasesArr.bind(this);\n    this.toggleIncomeForm = this.toggleIncomeForm.bind(this);\n    this.toggleBillForm = this.toggleBillForm.bind(this);\n    this.getBudget = this.getBudget.bind(this);\n    this.calculateBudget = this.calculateBudget.bind(this);\n    this.deleteBudgetButton = this.deleteBudgetButton.bind(this);\n    this.deleteLogs = this.deleteLogs.bind(this);\n    this.deleteLogsButton = this.deleteLogsButton.bind(this);\n    //this.deleteLogsButton = this.deleteLogsButton.bind(this);\n  }\n\n  componentDidMount() {\n    //gets the sum of all purchases made, then\n    //gets the budget obj from db, computesr total budget, then\n    //subtracts total purchases from budget to computer money leftover\n    this.getPurchasesTotal()\n      .then(res => {\n        console.log(res.data);\n        if (res.data.length > 0) {\n          this.setState({ totalPurchases: res.data[0].amount });\n        }\n      })\n      .then(this.calculateBudget); //here;\n\n    this.getPurchasesArr().then(res =>\n      this.setState({ expensesArray: res.data })\n    );\n  }\n\n  //gets an array of the purchase history\n  getPurchasesArr () {\n    return Axios.get('/log');\n  }\n\n  //get request for total purchases\n  getPurchasesTotal() {\n    return Axios.get('/log/expenses');\n  }\n  //get request for budget\n  getBudget() {\n    return Axios.get('/budget');\n  }\n\n  //gets budget props, calculates, and sets state with new budget calcs\n  calculateBudget() {\n    this.getBudget()\n      .then(res => {\n        console.log('budget response', res);\n        if (res.data.length > 0) {\n          this.setState({\n            renderIncomeForm: false,\n            renderBillForm: false,\n            renderPurchaseLogForm: true\n          });\n          let computeedBudget = res.data[0].income - res.data[0].bills;\n          this.setState({ budgetTotal: computeedBudget });\n        }\n      })\n      .then(() => {\n        let moneyLeft = this.state.budgetTotal - this.state.totalPurchases;\n        this.setState({ moneyLeft: moneyLeft });\n        console.log(this.state);\n      });\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({ income: event.target.value });\n  }\n\n  //submit button for purchases on purchaselog component\n  submitPurchase(event, purchaseObj) {\n    this.postPurchase(purchaseObj)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n  }\n\n  //submit button handler for posting budget\n  submitBudget(event, state) {\n    event.preventDefault();\n    let budgetObj = {};\n    budgetObj.income = this.state.income;\n    budgetObj.bills = state.total;\n    this.postBudget(budgetObj)\n      .then(res => console.log(res))\n      .then(this.calculateBudget)\n      .catch(err => console.log(err));\n  }\n\n  //gets an array of the purchase history\n  getPurchasesArr() {\n    return Axios.get('/log');\n  }\n\n  //get request for total purchases\n  getPurchasesTotal() {\n    return Axios.get('/log/expenses');\n  }\n  //get request for budget\n  getBudget() {\n    return Axios.get('/budget');\n  }\n\n  //deletes budget\n  deleteBudget() {\n    return Axios.delete('/budget');\n  }\n\n  deleteLogs() {\n    return Axios.delete('/log');\n  }\n\n  postBudget(budget) {\n    return axios.post('/budget', budget);\n  }\n  //posts purchase log to server\n  postPurchase(purchase) {\n    return axios.post('/log', purchase);\n  }\n\n  ///Delete button handlers\n\n  deleteBudgetButton(event) {\n    event.preventDefault();\n    this.deleteBudget()\n      .then(this.calculateBudget())\n      .then(() => {\n        this.setState({\n          renderIncomeForm: true,\n          renderBillForm: false,\n          renderPurchaseLogForm: false\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  deleteLogsButton(event) {\n    this.deleteLogs().then(this.calculateBudget());\n    window.location.reload();\n  }\n\n  // deleteLogsButton(event) {\n  //   event.preventDefault();\n  //   this.deleteLogs()\n  //     .then(this.calculateBudget)\n  //     .catch(err => console.log(err));\n  // }\n\n  /// A few functions that toggle components based on button clicks //\n  toggleIncomeForm(event) {\n    event.preventDefault();\n    this.setState({ renderIncomeForm: false });\n    this.setState({ renderBillForm: true });\n  }\n\n  toggleBillForm(event) {\n    event.preventDefault();\n    this.setState({ renderBillForm: false });\n    this.setState({ renderPurchaseLogForm: true });\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n\n  //post budget to server\n  postBudget(budget) {\n    return axios.post('/budget', budget);\n  }\n  //posts purchase log to server\n  postPurchase(purchase) {\n    return axios.post('/log', purchase);\n  }\n\n  render() {\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <h1 className=\"title\">Frugal.ly</h1>\n          {this.state.renderIncomeForm ? (\n            <form className=\"form\">\n              <label className=\"label\">\n                <div className=\"title\">Total Income: </div>\n                <br></br>\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={this.state.value}\n                  onChange={event => this.handleChange(event)}\n                />\n              </label>\n              <button\n                className=\"button is-primary\"\n                onClick={this.toggleIncomeForm}\n              >\n                Submit Income\n              </button>\n            </form>\n          ) : null}\n          {this.state.renderBillForm ? (\n            <Budget\n              render={this.toggleBillForm}\n              handler={this.submitBudget}\n              income={this.state.income}\n            />\n          ) : null}\n          {this.state.renderPurchaseLogForm ? (\n            <div>\n              <PurchaseLog\n                render={this.togglePurchaseLogForm}\n                handler={this.submitPurchase}\n              />\n              <div className=\"box\">\n                <div className=\"label\">\n                  Monthly budget after bills: ${this.state.budgetTotal}\n                </div>\n                <div className=\"label\">\n                  Remaining funds: ${this.state.moneyLeft}\n                </div>\n              </div>\n              <button\n                className=\"button is-primary\"\n                onClick={this.deleteBudgetButton}\n              >\n                Reset Budget\n              </button>\n            </div>\n          ) : null}\n          <PurchaseDataTable expenses={this.state.expensesArray} />\n          <button\n            className=\"button is-primary\"\n            onClick={event => this.deleteLogsButton(event)}\n          >\n            Delete Purchase History\n          </button>\n        </div>\n\n        <div className=\"column\">\n          <h1 className=\"title\">Spending Chart</h1>\n          <div id=\"chart\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}